data = '[{"allClasses":[{"name":"Transform","hierarchy":{"childList":["ObjectBase"]},"members":[{"name":"position","type":"Vector2f","desc":"Current X-Y co-ordinates of the object","visibility":35},{"name":"rotation","type":"float","desc":"Current rotation of the object in radians","visibility":35},{"name":"tParent","type":"Transform*","desc":"A pointer to the transform parent of this object (can be null if no parent assigned)","visibility":35},{"name":"tChildren","type":"vector<Transform*>","desc":"List of children that belong to this transform","visibility":35}],"methods":[{"name":"GetPosition()","returnType":"Vector2f","desc":"Gets the position of the object","visibility":43},{"name":"SetPosition(Vector2f targetPosition)","returnType":"Vector2f","desc":"Set the position of the transform and return new position","visibility":43},{"name":"GetRotation()","returnType":"float","desc":"Get rotation of the object","visibility":43},{"name":"SetRotation(float targetRotation)","returnType":"float","desc":"Set rotation of the object in radians","visibility":43},{"name":"GetScale()","returnType":"float","desc":"Get scale multiplier of the object","visibility":43},{"name":"SetScale(float targetScale)","returnType":"float","desc":"Set the scale multiplier of the object","visibility":43},{"name":"GetParent()","returnType":"Transform*","desc":"Get the transform parent of this transform","visibility":43},{"name":"SetParent(Transform* targetTransform)","returnType":"Transform*","desc":"Set transform parent of this object","visibility":43},{"name":"LookAt(Vector2f target)","returnType":"void","desc":"Have this transform look at a vector location","visibility":43},{"name":"Translate(Vector2f translation)","returnType":"void","desc":"Translate the position with given vector","visibility":43},{"name":"Rotate(float amount)","returnType":"void","desc":"Rotate the object by given radians","visibility":43},{"name":"GetChild(string name)","returnType":"Transform*","desc":"Get a child transform object with given name","visibility":43},{"name":"GetChild(int index)","returnType":"Transform*","desc":"Get transform object with given list index","visibility":43},{"name":"AddChild(Transform* childTransform)","returnType":"void","desc":"Add the child transform of target transform to children list","visibility":43},{"name":"RemoveChild(Transform* childTransform)","returnType":"void","desc":"Remove a child from this transform given another Transform object","visibility":43},{"name":"RemoveChild(string name)","returnType":"void","desc":"Remove a child from this transform given a name string","visibility":43},{"name":"PrintChildren()","returnType":"void","desc":"Debug option to display all transform children associated with this object","visibility":43}]},{"name":"Timer","hierarchy":{"childList":["ObjectBase"]},"members":[{"name":"count","type":"float","desc":"Current timer position","visibility":45},{"name":"active","type":"bool","desc":"If the timer should trigger","visibility":45},{"name":"triggered","type":"bool","desc":"If the timer has elapsed and triggered","visibility":45},{"name":"interval","type":"float","desc":"The rate at which the timer will trigger","visibility":45}],"methods":[{"name":"OnUpdate()","returnType":"void","desc":"Called once each frame","visibility":43},{"name":"Initialise(ObjectBase* parent)","returnType":"void","desc":"Initialise the timer, this should always be called after creating this object","visibility":43},{"name":"SetTimer(float interval)","returnType":"void","desc":"Load timer and set the interval","visibility":43},{"name":"RestartTimer()","returnType":"void","desc":"Reset the timer back to count 0 and untriggered, the interval will not change","visibility":43},{"name":"Trigger()","returnType":"void","desc":"Trigger the timer once elapsed","visibility":43},{"name":"SetInterval(float interval)","returnType":"void","desc":"Set the interval at which the timer will trigger","visibility":43},{"name":"SetActive(bool active)","returnType":"void","desc":"Set active state","visibility":43},{"name":"GetTriggered()","returnType":"bool","desc":"Get whether the timer has triggered","visibility":43}]},{"name":"Renderer","hierarchy":{"childList":["ObjectBase"]},"members":[{"name":"drawEngine","type":"DrawEngine*","desc":"Stored a reference to the draw engine","visibility":45},{"name":"imageIndex","type":"ImageIndex","desc":"The image ID of the sprite to render","visibility":45}],"methods":[{"name":"OnUpdate(float deltaTime)","returnType":"void","desc":"Called once each frame","visibility":43},{"name":"Initialise(ObjectBase* owner, string spritePath)","returnType":"void","desc":"Initialise all information about the renderer","visibility":43}]},{"name":"ObjectHandler","hierarchy":{"childList":[]},"members":[{"name":"deltaClock","type":"sf::Clock","desc":"The Gameclock","visibility":45},{"name":"worldObjects","type":"std::list<ObjectBase*>","desc":"List of all world objects in the game","visibility":43}],"methods":[{"name":"GetInstance()","returnType":"ObjectHandler&","desc":"Singleton instance getter","visibility":43},{"name":"Instantiate(std::string name, sf::Vector2f position, float rotation)","returnType":"T*","desc":"Instantiate a new object, passing a given class type. Pass a name of object, an initial position and an initial rotation.","visibility":43},{"name":"UpdateAll()","returnType":"void","desc":"Update all objects","visibility":43},{"name":"DestroyAll()","returnType":"void","desc":"Delete all loaded objects (except persistant ones)","visibility":43},{"name":"UpdateCollision","returnType":"void","desc":"Update all collision events","visibility":43},{"name":"Cleaup()","returnType":"void","desc":"Remove all objects marked for destruction","visibility":43}]},{"name":"ObjectBase","hierarchy":{"childList":[]},"members":[{"name":"GetSubobject()","type":"T*","desc":"Returns a subobject by type, following FIFO","visibility":43},{"name":"CreateSubobject()","type":"T*","desc":"Create a subobject to the object, generally disigned for components","visibility":43},{"name":"RemoveSubobject()","type":"T*","desc":"Remove a subobject from the object","visibility":43},{"name":"GetCountSubobject()","type":"T*","desc":"Count amount of subobjects that exist of type T","visibility":43},{"name":"UpdateAll(float deltaTime)","type":"void","desc":"Update all objects in the game","visibility":43},{"name":"Destroy()","type":"void","desc":"Destroy this object","visibility":43},{"name":"OnUpdate(float deltaTime)","type":"void","desc":"Called each frame","visibility":43},{"name":"OnAwake()","type":"void","desc":"Calls before Start()","visibility":43},{"name":"OnStart()","type":"void","desc":"Called just after OnAwake()","visibility":43},{"name":"OnDestroy()","type":"void","desc":"Called just before the object is destroyed","visibility":43},{"name":"OnCollision(Collider collisionEvent)","type":"void","desc":"Called when a collision event happens (overlap between two CollisonBase)","visibility":43},{"name":"ReadyForDestruction()","type":"bool","desc":"Check if the object is ready to be destroyed","visibility":43},{"name":"SetName(std::string newName)","type":"void","desc":"Set the object name","visibility":43},{"name":"GetName()","type":"std::string","desc":"Get object name","visibility":43},{"name":"GetOwner()","type":"ObjectBase*","desc":"Get object that created this one. if object was created using objectHandler this value will be nullptr","visibility":43},{"name":"SetOwner(ObjectBase* newOwner)","type":"void","desc":"Set object that created this one","visibility":43},{"name":"OnComponentTryAdd()","type":"bool","desc":"Try add a component - event","visibility":43},{"name":"GetSubobjectCount()","type":"int","desc":"Get amount of subobjects","visibility":43}],"methods":[{"name":"subobjects","returnType":"std::list<ObjectBase*>","desc":"List of subobjects that belong to this object","visibility":35},{"name":"owner","returnType":"ObjectBase*","desc":"The object that created this one (if applicable)","visibility":35},{"name":"markedForDestruction","returnType":"bool","desc":"Object cleanup, do not edit directly","visibility":35},{"name":"name","returnType":"std::string","desc":"Name given to this object","visibility":35},{"name":"canTick","returnType":"bool","desc":"Set this to false to stop update invoke","visibility":43},{"name":"persistant","returnType":"bool","desc":"If this is true, object will not destroy when level changes","visibility":43}]},{"name":"LevelHandler","hierarchy":{"childList":[]},"members":[{"name":"loadedLevels","type":"std::vector<Level*>","desc":"List of loaded levels","visibility":45},{"name":"activeLevel","type":"LevelIndex","desc":"Currently active level index","visibility":45},{"name":"handler","type":"ObjectHandler*","desc":"Object handler reference","visibility":45}],"methods":[{"name":"GetInstance()","returnType":"LevelHandler&","desc":"Call to get a reference to Level Handler static instance","visibility":43},{"name":"LoadLevel","returnType":"LevelIndex","desc":"Load a level into memory - each level should only be loaded ONCE","visibility":43},{"name":"UpdateLevels","returnType":"void","desc":"Called each tick, used for if levels have checks, etc","visibility":43},{"name":"GetActiveLevel()","returnType":"LevelIndex","desc":"Get active level index","visibility":43},{"name":"SetActiveLevel(LevelIndex levelIndex)","returnType":"void","desc":"Set active level","visibility":43}]},{"name":"Engine","hierarchy":{"childList":[]},"members":[{"name":"objectHandler","type":"ObjectHandler*","desc":"Reference to the object handler","visibility":45},{"name":"levelHandler","type":"LevelHandler*","desc":"Reference to the level handler","visibility":45}],"methods":[{"name":"GameStart()","returnType":"int","desc":"Called at the start of the game","visibility":43},{"name":"GameLoop()","returnType":"int","desc":"Called once each frame after game starts","visibility":43},{"name":"GameEnd()","returnType":"int","desc":"Called at the end of the game","visibility":43}]},{"name":"Level","hierarchy":{"childList":[]},"members":[{"name":"objectHandler","type":"ObjectHandler*","desc":"Reference to the object handler","visibility":35}],"methods":[{"name":"OnAwake()","returnType":"void","desc":"Called when object is loaded into memory","visibility":43},{"name":"OnStart()","returnType":"void","desc":"Called when the level is loaded into the game and becomes active","visibility":43},{"name":"OnUpdate()","returnType":"void","desc":"Called once each frame","visibility":43}]},{"name":"DrawEngine","hierarchy":{"childList":[]},"members":[{"name":"WIDTH","type":"const int","desc":"Width of window","visibility":43},{"name":"HEIGHT","type":"const int","desc":"Height of the window","visibility":43},{"name":"window","type":"sf::RenderWindow*","desc":"Main window object","visibility":45},{"name":"imageList","type":"std::map<ImageIndex, ImageData*>","desc":"List of existing sprites","visibility":45},{"name":"textureList","type":"std::map<TextureIndex, TextureData*>","desc":"List of existing textures","visibility":45},{"name":"fontList","type":"std::map<FontIndex, sf::Font*>","desc":"List of existing fonts","visibility":45},{"name":"textList","type":"std::map<TextIndex, TextData*>","desc":"List of existing texts","visibility":45},{"name":"imageCount","type":"int","desc":"Total amount of sprites loaded","visibility":45},{"name":"textureCount","type":"int","desc":"Total amount of textures loaded","visibility":45},{"name":"fontCount","type":"int","desc":"Total amount of fonts loaded","visibility":45},{"name":"textCount","type":"int","desc":"Total amount of text loaded","visibility":45},{"name":"drawList","type":"std::vector<ImageIndex>","desc":"List of objects to be drawn next frame","visibility":45},{"name":"textDrawList","type":"std::vector<TextIndex>","desc":"List of text to be drawn next frame","visibility":45}],"methods":[{"name":"GetWindow()","returnType":"sf::RenderWindow*","desc":"Returns the window","visibility":43},{"name":"DrawSpriteToScreen(ImageIndex imageIndex, sf::Vector2<float> position, float rotation, sf::Vector2f scale)","returnType":"void","desc":"Draw a sprite to the screen at a position","visibility":43},{"name":"DrawTextToScreen(TextIndex textIndex, sf::Vector2f position)","returnType":"void","desc":"Draw some text to the screen at position","visibility":43},{"name":"LoadImage(const std::string& path)","returnType":"ImageIndex","desc":"Loads a specified image into memory, returning an image index ID to access image properties","visibility":43},{"name":"LoadFont(const std::string& path)","returnType":"FontIndex","desc":"Loads a specified font into memory, returning an font index ID to access font properties","visibility":43},{"name":"TextureExists(const std::string& path)","returnType":"TextureIndex","desc":"Returns texture index if texture already loaded","visibility":43},{"name":"GetTextureIndex(const std::string& path)","returnType":"TextureIndex","desc":"Returns a texture index if texture already loaded","visibility":43},{"name":"GetTexture(TextureIndex index)","returnType":"TextureData*","desc":"Returns texture data if texture is loaded","visibility":43},{"name":"GetImageData(ImageIndex index)","returnType":"ImageData*","desc":"Returns a sprite based on image index provided","visibility":43},{"name":"SetTextColour(TextIndex textIndex, sf::Color newColour)","returnType":"void","desc":"Sets the colour of a preloaded text","visibility":43},{"name":"SetTextSize(TextIndex textIndex, int newSize)","returnType":"void","desc":"Set the size of a preloaded text","visibility":43},{"name":"SetTextFormat(TextIndex textIndex, bool underline)","returnType":"void","desc":"Set the format of a preloaded text","visibility":43},{"name":"SetTextString(TextIndex textIndex, std::string newText)","returnType":"void","desc":"Set the text of a predefined text","visibility":43},{"name":"Draw()","returnType":"void","desc":"Draw everything to the screen","visibility":43}]},{"name":"Debug","hierarchy":{"childList":[]},"members":[],"methods":[{"name":"Log(T arg, F ... args)","returnType":"void","desc":"Prints out to the console recursively","visibility":43},{"name":"Log(T arg)","returnType":"void","desc":"Prints out to the console","visibility":43}]},{"name":"Collider","hierarchy":{"childList":[]},"members":[{"name":"myCollisionComponent","type":"CollisionBase*","desc":"Collision component of the object that created the overlap","visibility":43},{"name":"CollisionComponentHit","type":"CollisionBase*","desc":"The collision component of the other collider","visibility":43},{"name":"collisionObjectHit","type":"ObjectBase*","desc":"The object that was collided with","visibility":43}],"methods":[]},{"name":"CollisionBase","hierarchy":{"childList":[]},"members":[{"name":"parentTransform","type":"Transform*","desc":"Transform of the object that owns the collision component","visibility":45},{"name":"ignoreList","type":"std::list<std::string>","desc":"A list of names of objects to ignore while colliding","visibility":45}],"methods":[{"name":"OnStart()","returnType":"void","desc":"Called after the constructor","visibility":43},{"name":"OnOverlap(Collider collisionEvent)","returnType":"void","desc":"Called when a collision component overlaps with another","visibility":43},{"name":"AddIgnore(std::string objectName)","returnType":"void","desc":"Add a name to the ignore list","visibility":43},{"name":"CheckIgnore(std::string objectName)","returnType":"bool","desc":"Check if the object is to be ignored","visibility":43},{"name":"GetShape()","returnType":"Shape2D&","desc":"Override by child to set shape scope","visibility":43}]},{"name":"CollisionBox","hierarchy":{"childList":["CollisionBase"]},"members":[{"name":"boundingBox","type":"Box2D","desc":"Bounding box for the collision","visibility":45}],"methods":[{"name":"IsColliding(CollisionBox* other)","returnType":"bool","desc":"Returns true when the box is overlapping with another box","visibility":43},{"name":"GetBounds()","returnType":"Box2D&","desc":"Return the bounding box","visibility":43},{"name":"Getshape()","returnType":"Shape2D&","desc":"Used to return the type of shape that belongs to this object, to be used polymorphically","visibility":43},{"name":"Initialise(int boxWidth, int boxHeight)","returnType":"void","desc":"Sets up the bounding box of the collision shape ","visibility":43}]},{"name":"Box2D","hierarchy":{"childList":[]},"members":[{"name":"x","type":"float","desc":"X coord","visibility":43},{"name":"y","type":"float","desc":"Y coord","visibility":43},{"name":"width","type":"int","desc":"Width","visibility":43},{"name":"height","type":"int","desc":"Height","visibility":43}],"methods":[{"name":"Intersects(Shape2D* otherShape)","returnType":"bool","desc":"Check whether it intersects with another shape","visibility":43},{"name":"SetPosition(float x, float y)","returnType":"void","desc":"Set X, Y position of the box (centred)","visibility":43},{"name":"SetPosition(sf::Vector2f vector)","returnType":"void","desc":"Set X, Y position of the box (centred)","visibility":43},{"name":"SetHeight(int val)","returnType":"void","desc":"Set height size of box","visibility":43},{"name":"SetWidth(int val)","returnType":"void","desc":"Set width size of box","visibility":43}]},{"name":"UIAppearance","hierarchy":{"childList":["ObjectBase"]},"members":[{"name":"drawEngine","type":"DrawEngine*","desc":"Pointer to the draw engine reference","visibility":45},{"name":"sprite","type":"sf::Sprite*","desc":"Pointer to the sprite that should be changed","visibility":45},{"name":"spriteWidth","type":"float","desc":"The pixel width of the sprite","visibility":45},{"name":"spriteHeight","type":"float","desc":"The pixel height of the sprite","visibility":45},{"name":"scale","type":"sf::Vector2f","desc":"Stores the local scale of the sprite","visibility":45}],"methods":[{"name":"SetScale(x: float, y: float)","returnType":"void","desc":"Set the scale of sprite","visibility":45},{"name":"OnStart()","returnType":"void","desc":"Override- Called on game start","visibility":43},{"name":"GetTint(image: ImageIndex)","returnType":"sf::Color","desc":"Returns the tint of given image","visibility":43},{"name":"SetTint(image: ImageIndex, colour: sf::Color)","returnType":"void","desc":"Set the tint of given image","visibility":43},{"name":"SetOpacity(image: ImageIndex, opacity: float)","returnType":"void","desc":"Set opacity of given image","visibility":43},{"name":"GetScale()","returnType":"float","desc":"Get scale of sprite","visibility":43},{"name":"GetSpriteWidth()","returnType":"float","desc":"Get pixel width of sprite","visibility":43},{"name":"GetSpriteHeight()","returnType":"float","desc":"Get pixel height of sprite","visibility":43},{"name":"UpdateSprite(image: ImageIndex, width: float, height: float)","returnType":"void","desc":"Update the width, height and scale of given image","visibility":43}]},{"name":"UIButton","hierarchy":{"childList":["UIInteractable"]},"members":[],"methods":[{"name":"OnStart()","returnType":"void","desc":"Override-- Called on game start","visibility":43},{"name":"OnUpdate(deltaTime: float)","returnType":"void","desc":"Override-- Called every frame","visibility":43},{"name":"OnComponentTryAdd()","returnType":"bool","desc":"Override-- Called when CreateSubobject<>() is called","visibility":43}]},{"name":"UICanvas","hierarchy":{"childList":["UIComponent"]},"members":[{"name":"noOfComponentChildren","type":"int","desc":"Number of children that are UIComponents","visibility":35},{"name":"bgImg","type":"ImageIndex","desc":"Background image of the canvas","visibility":35}],"methods":[{"name":"OnStart()","returnType":"void","desc":"Override-- Called on game start","visibility":43},{"name":"OnUpdate(deltaTime: float)","returnType":"void","desc":"Override-- Called every frame","visibility":43},{"name":"UpdateChildren()","returnType":"bool","desc":"Updates anchors and size of child components","visibility":43}]},{"name":"UICheckBox","hierarchy":{"childList":["UIInteractable"]},"members":[{"name":"isChecked","type":"bool","desc":"Whether the box is checked or not","visibility":45},{"name":"checked","type":"ImageIndex","desc":"Image to display when the box is checked","visibility":45},{"name":"unchecked","type":"ImageIndex","desc":"Image to display when box is unchecked","visibility":45},{"name":"customCheckFunctionality","type":"CustomFunctionality","desc":"Custom functionality to execute when box is checked","visibility":45},{"name":"customUncheckFunctionality","type":"CustomFunctionality","desc":"Custom functionality to execute when box is unchecked","visibility":45}],"methods":[{"name":"OnStart()","returnType":"void","desc":"Override-- Called on game start","visibility":43},{"name":"OnUpdate(deltaTime: float)","returnType":"void","desc":"Override-- Called every frame","visibility":43},{"name":"GetIsChecked()","returnType":"bool","desc":"Return if box is checked","visibility":43},{"name":"SetIsChecked(isChecked: bool)","returnType":"void","desc":"Set whether the box is checked","visibility":43},{"name":"ToggleChecked()","returnType":"void","desc":"Toggle box checked state","visibility":43},{"name":"GetCheckedImage()","returnType":"ImageIndex","desc":"Return image that displays when checked","visibility":43},{"name":"SetCheckedImage(path: std::string)","returnType":"void","desc":"Set image to display when box is checked","visibility":43},{"name":"GetUncheckedImage()","returnType":"ImageIndex","desc":"Return image that displays when unchecked","visibility":43},{"name":"SetUncheckedImage(path: std::string)","returnType":"void","desc":"Set image that displays when unchecked","visibility":43},{"name":"template<typename F>AssignOnCheckFunction(f: F)","returnType":"void","desc":"Assign functionality when box is checked","visibility":43},{"name":"template<typename F>AssignOnUncheckFunction(f: F)","returnType":"void","desc":"Assign functionality when box is unchecked","visibility":43}]},{"name":"UIComponent","hierarchy":{"childList":["ObjectBase"]},"members":[{"name":"drawEngine","type":"DrawEngine*","desc":"Pointer to draw engine instance","visibility":35},{"name":"rectTransform","type":"UITransform*","desc":"Pointer to a UITransform component","visibility":35},{"name":"type","type":"UIObjectType","desc":"Stores the type of object the UIComponent is","visibility":35},{"name":"isVisible","type":"bool","desc":"Whether the UIComponent is currently visible","visibility":35}],"methods":[{"name":"GetObjectType()","returnType":"UIObjectType","desc":"Return object type","visibility":43},{"name":"SetObjectType(type: UIObjectType)","returnType":"void","desc":"Set object type","visibility":43},{"name":"GetVisibility()","returnType":"bool","desc":"Return visibility of component","visibility":43},{"name":"SetVisibility(visibility: bool)","returnType":"void","desc":"Set visibility of component","visibility":43},{"name":"GetRectTransform()","returnType":"UITransform*","desc":"Return pointer to UITransform child component","visibility":43},{"name":"UpdateChild()","returnType":"void","desc":"Update child component","visibility":43},{"name":"Refresh()","returnType":"void","desc":"Refresh component","visibility":43}]},{"name":"UIDragable","hierarchy":{"childList":["UIInteractable"]},"members":[{"name":"previousPosition","type":"sf::Vector2f","desc":"Stores the position of the component from the last frame","visibility":35},{"name":"movementAmount","type":"sf::Vector2f","desc":"Stores the number of pixels component has moved since the last frame","visibility":35},{"name":"customDragFunctionality","type":"CustomFunctionality","desc":"Custom functionality to execute when component is dragged","visibility":35},{"name":"dragDirection","type":"DragAxis","desc":"The direction(s) in which the component can be dragged","visibility":35},{"name":"SetPreviousPosition(position: sf::Vector2f)","type":"void","desc":"Set previous position of component","visibility":35},{"name":"SetMovementAmount(amount: sf::Vector2f)","type":"void","desc":"Set movement amount between frames","visibility":35},{"name":"SetDragDirection(axis: DragAxis)","type":"void","desc":"Set direction(s) in which component can be dragged","visibility":35},{"name":"CheckXPosition()","type":"void","desc":"Check that the X position is within dragable bounds","visibility":35},{"name":"CheckYPosition()","type":"void","desc":"Check that the Y position is within dragable bounds","visibility":35},{"name":"UISlider","type":"friend","desc":"Friend class UISlider","visibility":43},{"name":"dragableArea","type":"sf::FloatRect","desc":"The bounds of the component dragable area","visibility":35}],"methods":[{"name":"OnDrag()","returnType":"void","desc":"Called when component is clicked and moved","visibility":43},{"name":"GetDragableArea()","returnType":"sf::FloatRect","desc":"Return bounds of component area","visibility":43},{"name":"GetMinXPos()","returnType":"float","desc":"Return minimum X position","visibility":43},{"name":"GetMaxXPos()","returnType":"float","desc":"Return maximum X position","visibility":43},{"name":"GetMinYPos()","returnType":"float","desc":"Return minimum Y position","visibility":43},{"name":"GetMaxYPos()","returnType":"float","desc":"Return maximum Y position","visibility":43},{"name":"UpdateDragableArea()","returnType":"void","desc":"Update dragable area bounds","visibility":43},{"name":"GetPreviousPosition()","returnType":"sf::Vector2f","desc":"Get component position from last frame","visibility":43},{"name":"GetMovementAmount()","returnType":"sf::Vector2f","desc":"Get amount component has moved","visibility":43},{"name":"GetDragDirection()","returnType":"DragAxis","desc":"Return direction(s) component can be dragged","visibility":43},{"name":"template<typename F>AssignDragFunctionality","returnType":"void","desc":"Custom drag functionality called when component is dragged","visibility":43}]},{"name":"UIDrawable","hierarchy":{"childList":["UIComponent"]},"members":[{"name":"currentDisplay","type":"ImageIndex","desc":"Currently displaying image","visibility":35},{"name":"appearance","type":"UIAppearance*","desc":"Pointer to UIAppearance child component","visibility":35}],"methods":[{"name":"GetCurrentDisplay()","returnType":"ImageIndex","desc":"Return currently displaying image","visibility":43},{"name":"SetCurrentDisplay(newDisplay: ImageIndex)","returnType":"void","desc":"Set currently displaying image","visibility":43},{"name":"SetCurrentDisplay(path: std::string)","returnType":"void","desc":"Set currently displaying image using image file path","visibility":43}]},{"name":"UIGridBox","hierarchy":{"childList":["UICanvas"]},"members":[{"name":"rows","type":"int","desc":"Number of rows in grid layout","visibility":45},{"name":"columns","type":"int","desc":"Number of columns in grid layout","visibility":45}],"methods":[{"name":"OnStart()","returnType":"void","desc":"Override-- Called on game start","visibility":43},{"name":"OnUpdate(deltaTime: float)","returnType":"void","desc":"Override-- Called every frame","visibility":43},{"name":"UpdateChildren()","returnType":"bool","desc":"Override-- Updates anchors and size of UIComponent children","visibility":43},{"name":"GetRows()","returnType":"int","desc":"Return number of rows in grid layout","visibility":43},{"name":"SetRows(rows: int)","returnType":"void","desc":"Set number of rows","visibility":43},{"name":"GetColumns()","returnType":"int","desc":"Return number of columns","visibility":43},{"name":"SetColumns(columns: int)","returnType":"void","desc":"Set number of columns in grid layout","visibility":43}]},{"name":"UIHorizontalBox","hierarchy":{"childList":["UICanvas"]},"members":[],"methods":[{"name":"OnStart()","returnType":"void","desc":"Override-- Called on game start","visibility":43},{"name":"OnUpdate(deltaTime: float)","returnType":"void","desc":"Override-- Called every frame","visibility":43},{"name":"UpdateChildren()","returnType":"bool","desc":"Override-- Updates anchors and size of UIComponent children","visibility":43}]},{"name":"UIImage","hierarchy":{"childList":["UIDrawable"]},"members":[],"methods":[{"name":"OnStart()","returnType":"void","desc":"Override-- Called on game start","visibility":43},{"name":"OnUpdate(deltaTime: float)","returnType":"void","desc":"Override-- Called every frame","visibility":43},{"name":"OnComponentTryAdd()","returnType":"bool","desc":"Override-- Called when CreateSubobject<>() is called","visibility":43},{"name":"Refresh()","returnType":"void","desc":"Override-- Refreshes component anchors and all children","visibility":43}]},{"name":"UIInteractable","hierarchy":{"childList":["UIDrawable"]},"members":[{"name":"mEvent","type":"sf::Event","desc":"Mouse event","visibility":35},{"name":"cUnpressed","type":"ImageIndex","desc":"Image to display when unpressed","visibility":35},{"name":"cHovered","type":"ImageIndex","desc":"Image to display on hover","visibility":35},{"name":"cPressed","type":"ImageIndex","desc":"Image to display on pressed","visibility":35},{"name":"cDisabled","type":"ImageInex","desc":"Image to display when disabled","visibility":35},{"name":"isDisabled","type":"bool","desc":"Whether component is disabled or not","visibility":35},{"name":"isClicked","type":"bool","desc":"Whether the component is currently clicked or not","visibility":35},{"name":"customHoverFunctionality","type":"CustomFunctionality","desc":"Custom functionality to execute on hover","visibility":35},{"name":"customClickFunctionality","type":"CustomFunctionality","desc":"Custom functionality to execute on click","visibility":35},{"name":"customUnhoverFunctionality","type":"CustomFunctionality","desc":"Custom functionality to execute on unhover","visibility":35},{"name":"customEnableFunctionality","type":"CustomFunctionality","desc":"Custom functionality to execute on enable","visibility":35},{"name":"customDisableFunctionality","type":"CustomFunctionality","desc":"Custom functionality to execute on disable","visibility":35}],"methods":[{"name":"OnHover()","returnType":"void","desc":"Functionality on hover","visibility":43},{"name":"OnClick()","returnType":"void","desc":"Functionality on click","visibility":43},{"name":"OnUnhover()","returnType":"void","desc":"Functionality on unhover","visibility":43},{"name":"Disable()","returnType":"void","desc":"Functionality on disable","visibility":43},{"name":"Enable()","returnType":"void","desc":"Functionality on enable","visibility":43},{"name":"ToggleDisable()","returnType":"void","desc":"Functionality on toggle","visibility":43},{"name":"GetUnpressedColour()","returnType":"ImageIndex","desc":"Return image displayed when unpressed","visibility":43},{"name":"SetUnpressedColour(path: std::string)","returnType":"void","desc":"Set image displayed when unpressed","visibility":43},{"name":"SetHoveredColour(path: std::string)","returnType":"void","desc":"Set image displayed when hovered","visibility":43},{"name":"GetHoveredColour()","returnType":"ImageIndex","desc":"Return image displayed on hover","visibility":43},{"name":"SetHoveredColour()","returnType":"void","desc":"Set image displayed when hovered","visibility":43},{"name":"GetPressedColour()","returnType":"ImageIndex","desc":"Return image displayed when pressed","visibility":43},{"name":"SetPressedColour(path: std::string)","returnType":"void","desc":"Set image displayed when pressed","visibility":43},{"name":"GetDisabledColour()","returnType":"ImageIndex","desc":"Return image displayed when disabled","visibility":43},{"name":"SetDisabledColour(path std::string)","returnType":"void","desc":"Set image displayed when disabled","visibility":43},{"name":"SetAllColour(unpressed: std::string, hovered: std::string, pressed: std::string, disabled: std::string)","returnType":"void","desc":"Set all images being displayed","visibility":43},{"name":"template<typename F>AssignOnHoverFunction(f: F)","returnType":"void","desc":"Custom hover functionality","visibility":43},{"name":"template<typename F>AssignOnClickFunction()","returnType":"void","desc":"Custom click functionality","visibility":43},{"name":"template<typename F>AssignOnClickFunction(f: F)","returnType":"void","desc":"Custom click functionality","visibility":43},{"name":"template<typename F>AssignOnUnhoverFunction(f: F)","returnType":"void","desc":"Custom unhover functionality","visibility":43},{"name":"template<typename F>AssignEnableFunction(f: F)","returnType":"void","desc":"Custom enable functionality","visibility":43},{"name":"template<typename F>AssignDisableFunctionality(f: F)","returnType":"void","desc":"Custom disable functionality","visibility":43}]},{"name":"UIProgressBar","hierarchy":{"childList":["UIInteractable"]},"members":[{"name":"precent","type":"float","desc":"Value between 0 and 1 for fill percent","visibility":45},{"name":"cEmpty","type":"ImageIndex","desc":"Image to display when empty","visibility":45},{"name":"cFull","type":"ImageIndex","desc":"Image to display when full","visibility":45},{"name":"fullPosition","type":"sf::Vector2f","desc":"Position of full part of bar","visibility":45},{"name":"emptyPosition","type":"sf::Vector2f","desc":"Position of empty part of bar","visibility":45},{"name":"fillDirection","type":"ProgressBarFill","desc":"Direction bar should fill","visibility":45},{"name":"appearance","type":"UIAppearance*","desc":"Pointer to appearance child component","visibility":45}],"methods":[{"name":"OnStart()","returnType":"void","desc":"Override-- Called on game start","visibility":43},{"name":"OnUpdate(deltaTime: float)","returnType":"void","desc":"Override-- Called every frame","visibility":43},{"name":"GetPercent()","returnType":"float","desc":"Return progress bar percentage fill","visibility":43},{"name":"SetPercent(percent: float)","returnType":"void","desc":"Set percentage fill between 0 and 1","visibility":43},{"name":"GetFillDirection()","returnType":"ProgressBarFill","desc":"Return fill direction of the bar","visibility":43},{"name":"SetFillDirection(fillDirection: ProgressBarFill)","returnType":"void","desc":"Set the fill direction of the bar","visibility":43},{"name":"GetEmptyImage()","returnType":"ImageIndex","desc":"Return the image displayed when the bar is empty","visibility":43},{"name":"SetEmptyImage(path: std::string)","returnType":"void","desc":"Set the image displayed when the bar is empty","visibility":43},{"name":"GetFullImage()","returnType":"ImageIndex","desc":"Return image displayed when the bar is full","visibility":43},{"name":"SetFullImage(path: std::string)","returnType":"void","desc":"Set the image displayed when the bar is full","visibility":43},{"name":"SetAllImages(empty: std::string, full: std::string)","returnType":"void","desc":"Set images for when the bar is empty and full","visibility":43},{"name":"OnComponentTryAdd()","returnType":"bool","desc":"Override-- Called when CreateSubobject<>() is called","visibility":43}]},{"name":"UIScaleBox","hierarchy":{"childList":["UICanvas"]},"members":[{"name":"width","type":"float","desc":"Pixel width of child image","visibility":45},{"name":"height","type":"float","desc":"Pixel height of child image","visibility":45},{"name":"child","type":"UIImage*","desc":"Pointer to child image component","visibility":45}],"methods":[{"name":"OnStart()","returnType":"void","desc":"Override-- Called on game start","visibility":43},{"name":"OnUpdate(deltaTime: float)","returnType":"void","desc":"Override-- Called every frame","visibility":43},{"name":"Refresh()","returnType":"void","desc":"Override-- Refreshes anchors and size of component and children","visibility":43},{"name":"CalculateAnchors()","returnType":"void","desc":"Recalculate component anchors","visibility":43},{"name":"OnComponentTryAdd()","returnType":"bool","desc":"Override-- Called when CreateSubobject<>() is called","visibility":43}]},{"name":"UIScrollBar","hierarchy":{"childList":["UIDragable"]},"members":[{"name":"scrollPercent","type":"float","desc":"Value between 0 and 1 for how far scrolled the bar is","visibility":45},{"name":"scrollDirection","type":"ScrollDirection","desc":"Direction(s) in which the bar can be scrolled","visibility":45}],"methods":[{"name":"OnStart()","returnType":"void","desc":"Override-- Called on game start","visibility":43},{"name":"OnUpdate(deltaTime: float)","returnType":"void","desc":"Override-- Called every frame","visibility":43},{"name":"GetScrollPercent()","returnType":"float","desc":"Return bar scroll percent between 0 and 1","visibility":43},{"name":"SetScrollPercent(newPercent: float)","returnType":"void","desc":"Set the scroll percentage of the bar","visibility":43},{"name":"CalculateScrollPercent()","returnType":"void","desc":"Calculate the scroll percentage of the bar","visibility":43},{"name":"Refresh()","returnType":"void","desc":"Override-- Refresh anchors and size of component and children","visibility":43}]},{"name":"UISlider","hierarchy":{"childList":["UIDrawable"]},"members":[{"name":"slideDirection","type":"DragAxis","desc":"Axis in which slider bar can be dragged","visibility":45},{"name":"bar","type":"UIScrollBar*","desc":"Pointer to bar child component","visibility":45},{"name":"sliderBackground","type":"ImageIndex","desc":"Image to display as background of slider","visibility":45}],"methods":[{"name":"OnStart()","returnType":"void","desc":"Override-- Called on game start","visibility":43},{"name":"OnUpdate(deltaTime: float)","returnType":"void","desc":"Override-- Called every frame","visibility":43},{"name":"GetDirection()","returnType":"DragAxis","desc":"Return direction(s) in which slider bar can be dragged","visibility":43},{"name":"SetDirection(axis: DragAxis)","returnType":"void","desc":"Set direction(s) slider bar can be dragged","visibility":43},{"name":"GetBar()","returnType":"UIScrollBar*","desc":"Return pointer to bar child component","visibility":43},{"name":"GetValue()","returnType":"float","desc":"Return current value of slider between 0 and 1","visibility":43},{"name":"Refresh()","returnType":"void","desc":"Override-- Refresh anchors and size of component and children","visibility":43},{"name":"OnComponentTryAdd()","returnType":"bool","desc":"Override-- Called when CreateSubobject<>() is called","visibility":43}]},{"name":"UIText","hierarchy":{"childList":["UIComponent"]},"members":[{"name":"textValue","type":"std::string","desc":"Text to draw to screen","visibility":45},{"name":"text","type":"sf::Text","desc":"Text data","visibility":45},{"name":"font","type":"sf::Font","desc":"Font data","visibility":45},{"name":"textColour","type":"sf::Color","desc":"Text colour","visibility":45},{"name":"opacity","type":"float","desc":"Text opacity","visibility":45},{"name":"fontSize","type":"float","desc":"Size the text should be drawn","visibility":45},{"name":"alignHorizontal","type":"HAlignment","desc":"Horizontal alignment of text","visibility":45},{"name":"alignVertical","type":"VAlignment","desc":"Vertical alignment of text","visibility":45},{"name":"f","type":"FontIndex","desc":"Font Index of the text component","visibility":45},{"name":"t","type":"TextIndex","desc":"TextIndex of the component","visibility":45},{"name":"ReloadText()","type":"void","desc":"Refresh text when critical value is updated","visibility":45}],"methods":[{"name":"OnStart()","returnType":"void","desc":"Override-- Called on game start","visibility":43},{"name":"OnUpdate(deltaTime: float)","returnType":"void","desc":"Override-- Called every frame","visibility":43},{"name":"GetText()","returnType":"std::string","desc":"Return text value of component","visibility":43},{"name":"SetText(textValue: std::string)","returnType":"void","desc":"Set the text value","visibility":43},{"name":"GetSize()","returnType":"float","desc":"Return text font size","visibility":43},{"name":"SetSize(size: float)","returnType":"void","desc":"Set size of text","visibility":43},{"name":"GetColour()","returnType":"sf::Color","desc":"Return text colour","visibility":43},{"name":"SetColour(colour: sf::Color)","returnType":"void","desc":"Set text colour","visibility":43},{"name":"GetOpacity()","returnType":"float","desc":"Return text opacity","visibility":43},{"name":"SetOpacity(opacity: float)","returnType":"void","desc":"Set text opacity","visibility":43},{"name":"GetHorizontalAlignment()","returnType":"HAlignment","desc":"Return horizontal alignment of text","visibility":43},{"name":"SetHorizontalAlignment(align: HAlignment)","returnType":"void","desc":"Set horizontal alignment of text","visibility":43},{"name":"GetVerticalAlignment()","returnType":"VAlignment","desc":"Return vertical alignment of text","visibility":43},{"name":"SetVerticalAlignment(align: VAlignment)","returnType":"void","desc":"Set vertical alignment of text","visibility":43},{"name":"OnComponentTryAdd()","returnType":"bool","desc":"Override-- Called when CreateSubobject<>() is called","visibility":43}]},{"name":"UITransform","hierarchy":{"childList":["Transform"]},"members":[{"name":"drawEngine","type":"DrawEngine*","desc":"Pointer to draw engine instance","visibility":45},{"name":"anchorsX","type":"sf::Vector2f","desc":"X anchors of transform","visibility":43},{"name":"anchorsY","type":"sf::Vector2f","desc":"Y anchors of transform","visibility":43},{"name":"bounds","type":"sf::FloatRect","desc":"Transform bounds","visibility":43},{"name":"hAlign","type":"HAlignment","desc":"Horizontal alignment of transform","visibility":43},{"name":"vAlign","type":"VAlignment","desc":"Vertical alignment of transform","visibility":43}],"methods":[{"name":"SetSize(size: sf::Vector2f)","returnType":"void","desc":"Set component size","visibility":45},{"name":"GetXAnchors()","returnType":"sf::Vector2f","desc":"Return x anchors of transform","visibility":43},{"name":"GetXAnchorMidPoint()","returnType":"float","desc":"Return midpoint of x anchors","visibility":43},{"name":"GetYAnchors()","returnType":"sf::Vector2f","desc":"Return y anchors of transform","visibility":43},{"name":"GetYAnchorMidPoint()","returnType":"float","desc":"Return midpoint of y anchors","visibility":43},{"name":"GetAnchorSize()","returnType":"sf::Vector2f","desc":"Returns size of X and Y anchors (typically between 0 and 1)","visibility":43},{"name":"SetAnchors(XAnchors: sf::Vector2f, YAnchors: sf::Vector2f)","returnType":"void","desc":"Set transform anchors","visibility":43},{"name":"SetAnchors(minX: float, maxX: float, minY: float, maxY: float)","returnType":"void","desc":"Set transform anchors","visibility":43},{"name":"GetMinXAnchorPosition()","returnType":"float","desc":"Get screen position of minimum X anchor","visibility":43},{"name":"GetMaxXAnchorPosition()","returnType":"float","desc":"Return screen position of maximum x anchor","visibility":43},{"name":"GetMinYAnchorPosition()","returnType":"float","desc":"Return screen position of minimum Y anchor","visibility":43},{"name":"GetMaxYAnchorPosition()","returnType":"float","desc":"Return screen position of maximum Y anchor","visibility":43},{"name":"UpdateAnchors()","returnType":"void","desc":"Update anchors when critical information is changed","visibility":43},{"name":"GetWidth()","returnType":"float","desc":"Get pixel width of transform","visibility":43},{"name":"GetHeight()","returnType":"float","desc":"Return pixel height of transform","visibility":43},{"name":"GetSize()","returnType":"sf::Vector2f","desc":"Return pixel size of transform","visibility":43},{"name":"GetHAlignment()","returnType":"HAlignment","desc":"Return horizontal alignment of transform","visibility":43},{"name":"SetHAlignment(hAlign: HAlignment)","returnType":"void","desc":"Set horizontal alignment of transform","visibility":43},{"name":"GetVAlignment()","returnType":"VAlignment","desc":"Return vertical alignment of transform","visibility":43},{"name":"SetVAlignment(vAlign: VAlignment)","returnType":"void","desc":"Set vertical alignment of transform","visibility":43},{"name":"GetBounds()","returnType":"sf::FloatRect","desc":"Return bounds of transform","visibility":43},{"name":"SetBounds(bounds: sf::FloatRect)","returnType":"void","desc":"Set bounds of transform","visibility":43},{"name":"UpdateBounds()","returnType":"void","desc":"Refresh transform bounds if affecting values have been changed","visibility":43}]},{"name":"UIVerticalBox","hierarchy":{"childList":["UICanvas"]},"members":[],"methods":[{"name":"OnStart()","returnType":"void","desc":"Override-- Called on game start","visibility":43},{"name":"OnUpdate(delatTime: float)","returnType":"void","desc":"Override-- Called every frame","visibility":43},{"name":"UpdateChildren()","returnType":"bool","desc":"Override-- Update anchors and size of UIComponent children","visibility":43}]},{"name":"EmptyObject","hierarchy":{"childList":["ObjectBase"]},"members":[{"name":"transform","type":"Transform*","desc":"Transform component","visibility":43}],"methods":[{"name":"OnStart()","returnType":"void","desc":"Override- Called automatically on game start","visibility":43},{"name":"OnUpdate(deltaTime: float)","returnType":"void","desc":"Override- Called automatically every frame","visibility":43}]},{"name":"GameLevelMainMenu","hierarchy":{"childList":["Level"]},"members":[],"methods":[{"name":"OnStart()","returnType":"void","desc":"Override- Called automatically on game start","visibility":43}]},{"name":"UIHUD","hierarchy":{"childList":["EmptyObject"]},"members":[],"methods":[]},{"name":"UIHUDMainLevel","hierarchy":{"childList":["UIHUD"]},"members":[{"name":"maxHealth","type":"const float","desc":"Max player health","visibility":45},{"name":"titleTimer","type":"Timer*","desc":"Timer for title component events","visibility":45},{"name":"hintTimer","type":"Timer*","desc":"Timer for hint component events","visibility":45},{"name":"hudParent","type":"UICanvas*","desc":"Canvas parent object for HUD","visibility":35},{"name":"healthBar","type":"UIProgressBar*","desc":"Health bar component","visibility":35},{"name":"healthVal","type":"UIText*","desc":"Text display of health value","visibility":35},{"name":"scoreTitle","type":"UIText*","desc":"Score header text component","visibility":35},{"name":"score","type":"UIText*","desc":"Text display of score value","visibility":35},{"name":"titleText","type":"UIText*","desc":"Text display of title","visibility":35},{"name":"subtitleText","type":"UIText*","desc":"Text display for subtitle component","visibility":35},{"name":"hintTitle","type":"UIText*","desc":"Hint title text component","visibility":35},{"name":"hintText","type":"UIText*","desc":"Hint text component","visibility":35}],"methods":[{"name":"OnStart()","returnType":"void","desc":"Override- Called automatically on game start","visibility":43},{"name":"OnUpdate(deltaTime: float)","returnType":"void","desc":"Override- Called automatically every frame","visibility":43},{"name":"UpdateHealth(value: float)","returnType":"void","desc":"Update health bar and value","visibility":43},{"name":"SetScore(value: float)","returnType":"void","desc":"Update the score text to given value","visibility":43},{"name":"ShowTitle(title: std::string, subtitle: std::string, seconds: float)","returnType":"void","desc":"Display title with given text for given number of seconds","visibility":43},{"name":"HideTitle()","returnType":"void","desc":"Hide title from view","visibility":43},{"name":"ShowHintText(hintTitle: std::string, hint: std::string, seconds: float)","returnType":"void","desc":"Show hint with given text for given number of seconds","visibility":43},{"name":"HideHint()","returnType":"void","desc":"Hide hint text","visibility":43}]}]}]'